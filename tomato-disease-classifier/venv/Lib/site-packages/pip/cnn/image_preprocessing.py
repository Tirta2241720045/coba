import cv2
import numpy as np


def increase_brightness(image, brightness_factor=1.3):
    hsv_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
    hsv_image[..., 2] = hsv_image[..., 2] * brightness_factor
    hsv_image[..., 2] = np.clip(hsv_image[..., 2], 0, 255)
    brightened_image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2RGB)
    return brightened_image


def filter_colors(image):
    hsv_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

    green_lower = np.array([35, 40, 40])
    green_upper = np.array([85, 255, 255])
    green_mask = cv2.inRange(hsv_image, green_lower, green_upper)

    yellow_lower = np.array([20, 100, 100])
    yellow_upper = np.array([30, 255, 255])
    yellow_mask = cv2.inRange(hsv_image, yellow_lower, yellow_upper)

    brown_lower = np.array([10, 100, 50])
    brown_upper = np.array([30, 255, 150])
    brown_mask = cv2.inRange(hsv_image, brown_lower, brown_upper)

    combined_mask = cv2.bitwise_or(green_mask, yellow_mask)
    combined_mask = cv2.bitwise_or(combined_mask, brown_mask)

    kernel = np.ones((5, 5), np.uint8)
    expanded_mask = cv2.morphologyEx(combined_mask, cv2.MORPH_CLOSE, kernel)
    expanded_mask = cv2.morphologyEx(expanded_mask, cv2.MORPH_OPEN, kernel)

    contours, _ = cv2.findContours(
        expanded_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE
    )

    final_mask = np.zeros_like(combined_mask)
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 100:
            cv2.drawContours(final_mask, [contour], 0, 255, -1)

    filtered_image = cv2.bitwise_and(image, image, mask=final_mask)

    white_background = np.ones_like(image, dtype=np.uint8) * 255
    final_image = np.where(filtered_image == 0, white_background, filtered_image)

    return final_image
